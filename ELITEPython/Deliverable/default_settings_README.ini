[input-config]
# The folder where the data resides
original_folder= Original_data
# Generated file with product related characteristics
product_related_characteristics_file = generated_productRelatedCharacteristics.csv
# Energy price in the period of the file
energy_price_file = generated_hourly_energy_price.csv
# If historical data is used, the historical downtime periods
historical_down_periods_file = historicalDownPeriods.csv
# The file with job info
job_info_file = generated_jobInfoProd.csv
# A file with failure info
failure_info_file = failureinfofile.xml
#failure_rate_file = hourlyFailureRate.csv



[output-config]
# Booleans: Choose between 'True' and 'False'. Other values might give unpredictable results.
# Option to export the output to a folder
export = True
# Export folder (if previous value is True)
export_folder = \Results
# The original jobs file
output_init = original_jobs.csv
# The file with the final jobs
output_final = final_jobs.csv
# Displays the schedule in the end
interactive = True

[scenario-config]
# Tests (choose between GA - Genetic Algorithm and BF - Brute Force)
test = GA
# Choose scenario 
# scenario 1 = using unit cost and production rate,
# scenario 2 = using fixed cost C1 and variable cost C2
scenario = 1
# Should there be output validation (validates if the due date and release dates are all correct)
validation = False
# If the file already in the correct order? Continuing from older schedule
pre_selection = False

# Configuration of the weights
# The energy weight, weight of due date and after date, weight of the failure, conversion weight, flowtime weight
weight_energy = 1
weight_constraint = 10000
weight_failure = 0.100
weight_virtual_failure = 0.100
weight_conversion = 3
weight_flowtime = 0

# Configuration of the population
# The size of the population, the crossover rate, the mutation rate, the number of mutations, the max number of iterations
pop_size = 12
crossover_rate = 0.4
mutation_rate = 0.4
num_mutations = 3
iterations = 40000

# Stop condition: end_value, abs_time, num_iterations
# If stop_condition == num_iterations, determined by number iterations above
# If stop_condition = abs_time, determined by absolute time since start in seconds (value stop_value)
# If stop_condition = end_value, determined by the value of the optimisable number (mostly for testing), could run for ever
# The optimization can always be stopped by pressing 'c' or 'z' on the keyboard in the active terminal
stop_condition = num_iterations
stop_value = 40000
# The duration string: duration, quantity
duration_str = duration
# The evolution method: roulette or random (roulette recommended)
evolution_method = roulette
# The working method: historical, expected (expected mode recommended)
working_method = historical

# add break time to the job file (in hours)
add_time = 0
# remove breaks from the job file
remove_breaks = True

# The algorithm will adapt between low and high with a step of step
adapt_ifin_low = 5000
adapt_ifin_high = 35000
adapt_ifin_step = 10000

# The start and end date of the required optimization period
[start-end]
start_year = 2016
start_month = 11
start_day = 3
start_hour = 0
start_minute = 0 
start_second = 0
end_year = 2016 
end_month = 11
end_day = 30
end_hour = 0
end_minute = 0
end_second = 0